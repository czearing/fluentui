{"file":"C:\\Users\\czear\\Documents\\fluentui\\tools\\generators\\workspace-generator\\index.spec.ts","mappings":";;;;;;;;;;;AAAA,kDAAoE;AACpE,yCAA8C;AAE9C,mCAAgC;AAGhC,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,IAAI,IAAU,CAAC;IACf,MAAM,OAAO,GAAsC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IAEtE,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,GAAG,sCAA4B,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAS,EAAE;QAC3C,MAAM,eAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE/B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACtE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,wCAAwC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QAC3E,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,sCAAsC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACzE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,oCAAoC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;IACzE,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,GAAS,EAAE;;QAC5C,MAAM,eAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE/B,MAAM,OAAO,SAAG,IAAI,CAAC,IAAI,CAAC,oCAAoC,CAAC,0CAAE,QAAQ,EAAE,CAAC;QAE5E,MAAM,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;KAQrC,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAS,EAAE;QACtC,MAAM,eAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE/B,MAAM,OAAO,GAAG,iBAAQ,CAAC,IAAI,EAAE,sCAAsC,CAAC,CAAC;QAEvE,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAS,EAAE;;QAC1D,MAAM,eAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE/B,MAAM,OAAO,SAAG,IAAI,CAAC,IAAI,CAAC,mCAAmC,CAAC,0CAAE,QAAQ,EAAE,CAAC;QAE3E,MAAM,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;KAcrC,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAS,EAAE;;QACnD,MAAM,eAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE/B,MAAM,OAAO,SAAG,IAAI,CAAC,IAAI,CAAC,wCAAwC,CAAC,0CAAE,QAAQ,EAAE,CAAC;QAEhF,MAAM,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;;;KAsBrC,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAS,EAAE;QAC5D,MAAM,CAAC,eAAS,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,2BAA2B,CAAC,CAAC;IACnG,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\czear\\Documents\\fluentui\\tools\\generators\\workspace-generator\\index.spec.ts"],"sourcesContent":["import { createTreeWithEmptyWorkspace } from '@nrwl/devkit/testing';\r\nimport { Tree, readJson } from '@nrwl/devkit';\r\n\r\nimport generator from './index';\r\nimport { WorkspaceGeneratorGeneratorSchema } from './schema';\r\n\r\ndescribe('workspace-generator generator', () => {\r\n  let tree: Tree;\r\n  const options: WorkspaceGeneratorGeneratorSchema = { name: 'custom' };\r\n\r\n  beforeEach(() => {\r\n    tree = createTreeWithEmptyWorkspace();\r\n  });\r\n\r\n  it('should generate boilerplate', async () => {\r\n    await generator(tree, options);\r\n\r\n    expect(tree.exists('/tools/generators/custom/index.ts')).toBeTruthy();\r\n    expect(tree.exists('/tools/generators/custom/index.spec.ts')).toBeTruthy();\r\n    expect(tree.exists('/tools/generators/custom/schema.json')).toBeTruthy();\r\n    expect(tree.exists('/tools/generators/custom/schema.ts')).toBeTruthy();\r\n  });\r\n\r\n  it('should generate Schema types', async () => {\r\n    await generator(tree, options);\r\n\r\n    const content = tree.read('/tools/generators/custom/schema.ts')?.toString();\r\n\r\n    expect(content).toMatchInlineSnapshot(`\r\n      \"export interface CustomGeneratorSchema {\r\n        /**\r\n         * Library name\r\n         */\r\n        name: string;\r\n      }\r\n      \"\r\n    `);\r\n  });\r\n\r\n  it('should generate Schema', async () => {\r\n    await generator(tree, options);\r\n\r\n    const content = readJson(tree, '/tools/generators/custom/schema.json');\r\n\r\n    expect(content.id).toEqual('custom');\r\n  });\r\n\r\n  it('should generate implementation boilerplate', async () => {\r\n    await generator(tree, options);\r\n\r\n    const content = tree.read('/tools/generators/custom/index.ts')?.toString();\r\n\r\n    expect(content).toMatchInlineSnapshot(`\r\n      \"import { Tree, formatFiles, installPackagesTask } from '@nrwl/devkit';\r\n      import { libraryGenerator } from '@nrwl/workspace/generators';\r\n\r\n      import { CustomGeneratorSchema } from './schema'\r\n\r\n      export default async function(host: Tree, schema: CustomGeneratorSchema) {\r\n        await libraryGenerator(host, {name: schema.name});\r\n        await formatFiles(host);\r\n        return () => {\r\n          installPackagesTask(host)\r\n        }\r\n      }\r\n      \"\r\n    `);\r\n  });\r\n\r\n  it('should generate testing boilerplate', async () => {\r\n    await generator(tree, options);\r\n\r\n    const content = tree.read('/tools/generators/custom/index.spec.ts')?.toString();\r\n\r\n    expect(content).toMatchInlineSnapshot(`\r\n      \"import { createTreeWithEmptyWorkspace } from '@nrwl/devkit/testing';\r\n      import { Tree, readProjectConfiguration } from '@nrwl/devkit';\r\n\r\n      import generator from './index';\r\n      import { CustomGeneratorSchema } from './schema';\r\n\r\n      describe('custom generator', () => {\r\n        let appTree: Tree;\r\n        const options: CustomGeneratorSchema = { name: 'test' };\r\n\r\n        beforeEach(() => {\r\n          appTree = createTreeWithEmptyWorkspace();\r\n        });\r\n\r\n        it('should run successfully', async () => {\r\n          await generator(appTree, options);\r\n          const config = readProjectConfiguration(appTree, 'test');\r\n          expect(config).toBeDefined();\r\n        })\r\n      });\r\n      \"\r\n    `);\r\n  });\r\n\r\n  it(`should throw when required props are missing`, async () => {\r\n    expect(generator(tree, { name: '' })).rejects.toMatchInlineSnapshot(`[Error: name is required]`);\r\n  });\r\n});\r\n"],"version":3}