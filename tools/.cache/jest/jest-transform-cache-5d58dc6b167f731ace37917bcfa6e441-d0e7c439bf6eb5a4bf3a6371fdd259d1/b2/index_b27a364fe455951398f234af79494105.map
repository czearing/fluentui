{"file":"C:\\Users\\czear\\Documents\\fluentui\\tools\\generators\\migrate-converged-pkg\\index.ts","mappings":"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","names":[],"sources":["C:\\Users\\czear\\Documents\\fluentui\\tools\\generators\\migrate-converged-pkg\\index.ts"],"sourcesContent":["import {\r\n  Tree,\r\n  formatFiles,\r\n  updateJson,\r\n  readProjectConfiguration,\r\n  readWorkspaceConfiguration,\r\n  joinPathFragments,\r\n  readJson,\r\n  getProjects,\r\n  stripIndents,\r\n  visitNotIgnoredFiles,\r\n  logger,\r\n  writeJson,\r\n  updateProjectConfiguration,\r\n} from '@nrwl/devkit';\r\nimport { serializeJson } from '@nrwl/workspace';\r\nimport { updateJestConfig } from '@nrwl/jest/src/generators/jest-project/lib/update-jestconfig';\r\nimport * as path from 'path';\r\n\r\nimport { PackageJson, TsConfig } from '../../types';\r\n\r\nimport { MigrateConvergedPkgGeneratorSchema } from './schema';\r\n\r\n/**\r\n * TASK:\r\n * 1. migrate to typescript path aliases - #18343 ✅\r\n * 2. migrate to use standard jest powered by TS path aliases - #18368 ✅\r\n * 3. bootstrap new storybook config - #18394 ✅\r\n * 4. collocate all package stories from `react-examples` - #18394 ✅\r\n * 5. update npm scripts (setup docs task to run api-extractor for local changes verification) - #18403 ✅\r\n */\r\n\r\ninterface ProjectConfiguration extends ReturnType<typeof readProjectConfiguration> {}\r\n\r\ninterface AssertedSchema extends MigrateConvergedPkgGeneratorSchema {\r\n  name: string;\r\n}\r\n\r\ninterface NormalizedSchema extends ReturnType<typeof normalizeOptions> {}\r\n\r\ntype UserLog = Array<{ type: keyof typeof logger; message: string }>;\r\n\r\nexport default async function (tree: Tree, schema: MigrateConvergedPkgGeneratorSchema) {\r\n  const userLog: UserLog = [];\r\n\r\n  if (schema.stats) {\r\n    printStats(tree, schema);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    return () => {};\r\n  }\r\n\r\n  validateUserInput(tree, schema);\r\n\r\n  const options = normalizeOptions(tree, schema);\r\n\r\n  // 1. update TsConfigs\r\n  updatedLocalTsConfig(tree, options);\r\n  updatedBaseTsConfig(tree, options);\r\n\r\n  // 2. update Jest\r\n  updateLocalJestConfig(tree, options);\r\n  updateRootJestConfig(tree, options);\r\n\r\n  // 3. setup storybook\r\n  setupStorybook(tree, options);\r\n\r\n  // 4. move stories to package\r\n  moveStorybookFromReactExamples(tree, options, userLog);\r\n  removeMigratedPackageFromReactExamples(tree, options, userLog);\r\n\r\n  // 5. update package npm scripts\r\n  updateNpmScripts(tree, options);\r\n  updateApiExtractorForLocalBuilds(tree, options);\r\n\r\n  updateNxWorkspace(tree, options);\r\n\r\n  await formatFiles(tree);\r\n\r\n  return () => {\r\n    printUserLogs(userLog);\r\n  };\r\n}\r\n\r\n// ==== helpers ====\r\n\r\nconst templates = {\r\n  apiExtractorLocal: {\r\n    $schema: 'https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json',\r\n    extends: './api-extractor.json',\r\n    mainEntryPointFilePath: '<projectFolder>/dist/<unscopedPackageName>/src/index.d.ts',\r\n  },\r\n  apiExtractor: {\r\n    $schema: 'https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json',\r\n    extends: '@fluentui/scripts/api-extractor/api-extractor.common.json',\r\n  },\r\n  tsconfig: {\r\n    extends: '../../tsconfig.base.json',\r\n    include: ['src'],\r\n    compilerOptions: {\r\n      target: 'ES5',\r\n      module: 'CommonJS',\r\n      lib: ['es5', 'dom'],\r\n      outDir: 'dist',\r\n      jsx: 'react',\r\n      declaration: true,\r\n      experimentalDecorators: true,\r\n      importHelpers: true,\r\n      noUnusedLocals: true,\r\n      preserveConstEnums: true,\r\n      types: ['jest', 'custom-global', 'inline-style-expand-shorthand'],\r\n    } as TsConfig['compilerOptions'],\r\n  },\r\n  jest: (options: { pkgName: string }) => stripIndents`\r\n      // @ts-check\r\n\r\n      /**\r\n      * @type {jest.InitialOptions}\r\n      */\r\n      module.exports = {\r\n        displayName: '${options.pkgName}',\r\n        preset: '../../jest.preset.js',\r\n        globals: {\r\n          'ts-jest': {\r\n            tsConfig: '<rootDir>/tsconfig.json',\r\n            diagnostics: false,\r\n          },\r\n        },\r\n        transform: {\r\n          '^.+\\\\.tsx?$': 'ts-jest',\r\n        },\r\n        coverageDirectory: './coverage',\r\n        setupFilesAfterEnv: ['./config/tests.js'],\r\n        snapshotSerializers: ['@fluentui/jest-serializer-make-styles'],\r\n      };\r\n  `,\r\n  storybook: {\r\n    /* eslint-disable @fluentui/max-len */\r\n    main: stripIndents`\r\n      const rootMain = require('../../../.storybook/main');\r\n\r\n      module.exports = /** @type {Pick<import('../../../.storybook/main').StorybookConfig,'addons'|'stories'|'webpackFinal'>} */ ({\r\n        stories: [...rootMain.stories, '../src/**/*.stories.mdx', '../src/**/*.stories.@(ts|tsx)'],\r\n        addons: [...rootMain.addons],\r\n        webpackFinal: (config, options) => {\r\n          const localConfig = { ...rootMain.webpackFinal(config, options) };\r\n\r\n          return localConfig;\r\n        },\r\n      });\r\n    `,\r\n    /* eslint-enable @fluentui/max-len */\r\n    preview: stripIndents`\r\n      import * as rootPreview from '../../../.storybook/preview';\r\n\r\n      export const decorators = [...rootPreview.decorators];\r\n    `,\r\n    tsconfig: {\r\n      extends: '../tsconfig.json',\r\n      compilerOptions: {\r\n        allowJs: true,\r\n        checkJs: true,\r\n      },\r\n      exclude: ['../**/*.test.ts', '../**/*.test.js', '../**/*.test.tsx', '../**/*.test.jsx'],\r\n      include: ['../src/**/*', '*.js'],\r\n    },\r\n  },\r\n};\r\n\r\nfunction normalizeOptions(host: Tree, options: AssertedSchema) {\r\n  const defaults = {};\r\n  const workspaceConfig = readWorkspaceConfiguration(host);\r\n  const projectConfig = readProjectConfiguration(host, options.name);\r\n\r\n  return {\r\n    ...defaults,\r\n    ...options,\r\n    projectConfig,\r\n    workspaceConfig: workspaceConfig,\r\n    /**\r\n     * package name without npmScope (@scopeName)\r\n     */\r\n    normalizedPkgName: options.name.replace(`@${workspaceConfig.npmScope}/`, ''),\r\n    paths: {\r\n      configRoot: joinPathFragments(projectConfig.root, 'config'),\r\n      packageJson: joinPathFragments(projectConfig.root, 'package.json'),\r\n      tsconfig: joinPathFragments(projectConfig.root, 'tsconfig.json'),\r\n      jestConfig: joinPathFragments(projectConfig.root, 'jest.config.js'),\r\n      rootTsconfig: '/tsconfig.base.json',\r\n      rootJestPreset: '/jest.preset.js',\r\n      rootJestConfig: '/jest.config.js',\r\n      storybook: {\r\n        tsconfig: joinPathFragments(projectConfig.root, '.storybook/tsconfig.json'),\r\n        main: joinPathFragments(projectConfig.root, '.storybook/main.js'),\r\n        preview: joinPathFragments(projectConfig.root, '.storybook/preview.js'),\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nfunction validateUserInput(tree: Tree, options: MigrateConvergedPkgGeneratorSchema): asserts options is AssertedSchema {\r\n  if (!options.name) {\r\n    throw new Error(`--name cannot be empty. Please provide name of the package.`);\r\n  }\r\n\r\n  const projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n  if (!isPackageConverged(tree, projectConfig)) {\r\n    throw new Error(\r\n      `${options.name} is not converged package. Make sure to run the migration on packages with version 9.x.x`,\r\n    );\r\n  }\r\n}\r\n\r\nfunction printStats(tree: Tree, options: MigrateConvergedPkgGeneratorSchema) {\r\n  const allProjects = getProjects(tree);\r\n  const stats = {\r\n    migrated: [] as Array<ProjectConfiguration & { projectName: string }>,\r\n    notMigrated: [] as Array<ProjectConfiguration & { projectName: string }>,\r\n  };\r\n\r\n  allProjects.forEach((project, projectName) => {\r\n    if (!isPackageConverged(tree, project)) {\r\n      return;\r\n    }\r\n\r\n    if (isProjectMigrated(project)) {\r\n      stats.migrated.push({ projectName, ...project });\r\n\r\n      return;\r\n    }\r\n    stats.notMigrated.push({ projectName, ...project });\r\n  });\r\n\r\n  logger.info('Convergence DX migration stats:');\r\n  logger.info('='.repeat(80));\r\n\r\n  logger.info(`Migrated (${stats.migrated.length}):`);\r\n  logger.info(stats.migrated.map(projectStat => `- ${projectStat.projectName}`).join('\\n'));\r\n\r\n  logger.info('='.repeat(80));\r\n  logger.info(`Not migrated (${stats.notMigrated.length}):`);\r\n  logger.info(stats.notMigrated.map(projectStat => `- ${projectStat.projectName}`).join('\\n'));\r\n\r\n  return tree;\r\n}\r\n\r\nfunction isPackageConverged(tree: Tree, project: ProjectConfiguration) {\r\n  const packageJson = readJson<PackageJson>(tree, joinPathFragments(project.root, 'package.json'));\r\n  return packageJson.version.startsWith('9.');\r\n}\r\n\r\nfunction isProjectMigrated<T extends ProjectConfiguration>(\r\n  project: T,\r\n): project is T & Required<Pick<ProjectConfiguration, 'tags' | 'sourceRoot'>> {\r\n  // eslint-disable-next-line eqeqeq\r\n  return project.sourceRoot != null && Boolean(project.tags?.includes('vNext'));\r\n}\r\n\r\nfunction uniqueArray<T extends unknown>(value: T[]) {\r\n  return Array.from(new Set(value));\r\n}\r\n\r\nfunction updateNxWorkspace(tree: Tree, options: NormalizedSchema) {\r\n  updateProjectConfiguration(tree, options.name, {\r\n    ...options.projectConfig,\r\n    sourceRoot: joinPathFragments(options.projectConfig.root, 'src'),\r\n    tags: uniqueArray([...(options.projectConfig.tags ?? []), 'vNext', 'platform:web']),\r\n  });\r\n\r\n  return tree;\r\n}\r\n\r\nfunction updateNpmScripts(tree: Tree, options: NormalizedSchema) {\r\n  updateJson(tree, options.paths.packageJson, json => {\r\n    delete json.scripts['update-snapshots'];\r\n    delete json.scripts['start-test'];\r\n\r\n    json.scripts.docs = 'api-extractor run --config=config/api-extractor.local.json --local';\r\n    json.scripts[\r\n      'build:local'\r\n      // eslint-disable-next-line @fluentui/max-len\r\n    ] = `tsc -p . --module esnext --emitDeclarationOnly && node ../../scripts/typescript/normalize-import --output dist/${options.normalizedPkgName}/src && yarn docs`;\r\n    json.scripts.storybook = 'start-storybook';\r\n    json.scripts.start = 'storybook';\r\n    json.scripts.test = 'jest';\r\n\r\n    return json;\r\n  });\r\n\r\n  return tree;\r\n}\r\n\r\nfunction updateApiExtractorForLocalBuilds(tree: Tree, options: NormalizedSchema) {\r\n  writeJson(tree, joinPathFragments(options.paths.configRoot, 'api-extractor.local.json'), templates.apiExtractorLocal);\r\n  writeJson(tree, joinPathFragments(options.paths.configRoot, 'api-extractor.json'), templates.apiExtractor);\r\n\r\n  return tree;\r\n}\r\n\r\nfunction setupStorybook(tree: Tree, options: NormalizedSchema) {\r\n  tree.write(options.paths.storybook.tsconfig, serializeJson(templates.storybook.tsconfig));\r\n  tree.write(options.paths.storybook.main, templates.storybook.main);\r\n  tree.write(options.paths.storybook.preview, templates.storybook.preview);\r\n\r\n  return tree;\r\n}\r\n\r\nfunction moveStorybookFromReactExamples(tree: Tree, options: NormalizedSchema, userLog: UserLog) {\r\n  const reactExamplesConfig = getReactExamplesProjectConfig(tree, options);\r\n  const pathToStoriesWithinReactExamples = `${reactExamplesConfig.root}/src/${options.normalizedPkgName}`;\r\n\r\n  const storyPaths: string[] = [];\r\n\r\n  visitNotIgnoredFiles(tree, pathToStoriesWithinReactExamples, treePath => {\r\n    if (treePath.includes('.stories.')) {\r\n      storyPaths.push(treePath);\r\n    }\r\n  });\r\n\r\n  if (storyPaths.length === 0) {\r\n    userLog.push({\r\n      type: 'warn',\r\n      message: 'No package stories found within react-examples. Skipping storybook stories migration...',\r\n    });\r\n\r\n    return tree;\r\n  }\r\n\r\n  storyPaths.forEach(originPath => {\r\n    const pathSegments = splitPathFragments(originPath);\r\n    const fileName = pathSegments[pathSegments.length - 1];\r\n    const componentName = fileName.replace(/\\.stories\\.tsx?$/, '');\r\n    let contents = tree.read(originPath)?.toString('utf-8');\r\n\r\n    if (contents) {\r\n      contents = contents.replace(options.name, './index');\r\n      contents =\r\n        contents +\r\n        '\\n\\n' +\r\n        stripIndents`\r\n        export default {\r\n            title: 'Components/${componentName}',\r\n            component: ${componentName},\r\n        }\r\n      `;\r\n\r\n      tree.write(joinPathFragments(options.projectConfig.root, 'src', fileName), contents);\r\n\r\n      return;\r\n    }\r\n\r\n    throw new Error(`Error moving ${fileName} from react-examples`);\r\n  });\r\n\r\n  return tree;\r\n}\r\n\r\nfunction getReactExamplesProjectConfig(tree: Tree, options: NormalizedSchema) {\r\n  return readProjectConfiguration(tree, `@${options.workspaceConfig.npmScope}/react-examples`);\r\n}\r\n\r\nfunction removeMigratedPackageFromReactExamples(tree: Tree, options: NormalizedSchema, userLog: UserLog) {\r\n  const reactExamplesConfig = getReactExamplesProjectConfig(tree, options);\r\n\r\n  const paths = {\r\n    packageStoriesWithinReactExamples: `${reactExamplesConfig.root}/src/${options.normalizedPkgName}`,\r\n    packageJson: `${reactExamplesConfig.root}/package.json`,\r\n  };\r\n\r\n  if (!tree.exists(paths.packageStoriesWithinReactExamples)) {\r\n    return tree;\r\n  }\r\n\r\n  tree.delete(paths.packageStoriesWithinReactExamples);\r\n\r\n  userLog.push(\r\n    { type: 'warn', message: `NOTE: Deleting ${reactExamplesConfig.root}/src/${options.normalizedPkgName}` },\r\n    { type: 'warn', message: `      - Please update your moved stories to follow standard storybook format\\n` },\r\n  );\r\n\r\n  updateJson(tree, paths.packageJson, (json: PackageJson) => {\r\n    if (json.dependencies) {\r\n      delete json.dependencies[options.name];\r\n    }\r\n\r\n    return json;\r\n  });\r\n\r\n  return tree;\r\n}\r\n\r\nfunction updateLocalJestConfig(tree: Tree, options: NormalizedSchema) {\r\n  tree.write(options.paths.jestConfig, templates.jest({ pkgName: options.normalizedPkgName }));\r\n\r\n  return tree;\r\n}\r\n\r\nfunction updateRootJestConfig(tree: Tree, options: NormalizedSchema) {\r\n  updateJestConfig(tree, { project: options.name });\r\n\r\n  return tree;\r\n}\r\n\r\nfunction updatedLocalTsConfig(tree: Tree, options: NormalizedSchema) {\r\n  const newConfig: TsConfig = { ...templates.tsconfig };\r\n  const oldConfig = readJson<TsConfig>(tree, options.paths.tsconfig);\r\n\r\n  const oldConfigTypes = oldConfig.compilerOptions.types ?? [];\r\n  const newConfigTypes = newConfig.compilerOptions.types ?? [];\r\n  const updatedTypes = uniqueArray([...newConfigTypes, ...oldConfigTypes]);\r\n\r\n  newConfig.compilerOptions.types = updatedTypes;\r\n\r\n  tree.write(options.paths.tsconfig, serializeJson(newConfig));\r\n\r\n  return tree;\r\n}\r\n\r\nfunction updatedBaseTsConfig(tree: Tree, options: NormalizedSchema) {\r\n  const workspaceConfig = readWorkspaceConfiguration(tree);\r\n  const allProjects = getProjects(tree);\r\n\r\n  const projectPkgJson = readJson<PackageJson>(tree, options.paths.packageJson);\r\n\r\n  const depsThatNeedToBecomeAliases = Object.keys(projectPkgJson.dependencies ?? {})\r\n    .filter(pkgName => pkgName.startsWith(`@${workspaceConfig.npmScope}`))\r\n    .reduce((acc, pkgName) => {\r\n      acc[pkgName] = [`${allProjects.get(pkgName)?.root}/src/index.ts`];\r\n\r\n      return acc;\r\n    }, {} as Required<Pick<TsConfig['compilerOptions'], 'paths'>>['paths']);\r\n\r\n  updateJson<TsConfig, TsConfig>(tree, options.paths.rootTsconfig, json => {\r\n    json.compilerOptions.paths = json.compilerOptions.paths ?? {};\r\n    json.compilerOptions.paths[options.name] = [`${options.projectConfig.root}/src/index.ts`];\r\n\r\n    Object.assign(json.compilerOptions.paths, depsThatNeedToBecomeAliases);\r\n\r\n    return json;\r\n  });\r\n}\r\n\r\nfunction printUserLogs(logs: UserLog) {\r\n  logger.log(`${'='.repeat(80)}\\n`);\r\n\r\n  logs.forEach(log => logger[log.type](log.message));\r\n\r\n  logger.log(`${'='.repeat(80)}\\n`);\r\n}\r\n\r\nfunction splitPathFragments(filePath: string) {\r\n  return filePath.split(path.sep);\r\n}\r\n"],"version":3}