410f79c32f5f15deb4c51b3eb24d327e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nrwl/devkit");
const workspace_1 = require("@nrwl/workspace");
const update_jestconfig_1 = require("@nrwl/jest/src/generators/jest-project/lib/update-jestconfig");
const path = require("path");
function default_1(tree, schema) {
    return __awaiter(this, void 0, void 0, function* () {
        const userLog = [];
        if (schema.stats) {
            printStats(tree, schema);
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            return () => { };
        }
        validateUserInput(tree, schema);
        const options = normalizeOptions(tree, schema);
        // 1. update TsConfigs
        updatedLocalTsConfig(tree, options);
        updatedBaseTsConfig(tree, options);
        // 2. update Jest
        updateLocalJestConfig(tree, options);
        updateRootJestConfig(tree, options);
        // 3. setup storybook
        setupStorybook(tree, options);
        // 4. move stories to package
        moveStorybookFromReactExamples(tree, options, userLog);
        removeMigratedPackageFromReactExamples(tree, options, userLog);
        // 5. update package npm scripts
        updateNpmScripts(tree, options);
        updateApiExtractorForLocalBuilds(tree, options);
        updateNxWorkspace(tree, options);
        yield devkit_1.formatFiles(tree);
        return () => {
            printUserLogs(userLog);
        };
    });
}
exports.default = default_1;
// ==== helpers ====
const templates = {
    apiExtractorLocal: {
        $schema: 'https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json',
        extends: './api-extractor.json',
        mainEntryPointFilePath: '<projectFolder>/dist/<unscopedPackageName>/src/index.d.ts',
    },
    apiExtractor: {
        $schema: 'https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json',
        extends: '@fluentui/scripts/api-extractor/api-extractor.common.json',
    },
    tsconfig: {
        extends: '../../tsconfig.base.json',
        include: ['src'],
        compilerOptions: {
            target: 'ES5',
            module: 'CommonJS',
            lib: ['es5', 'dom'],
            outDir: 'dist',
            jsx: 'react',
            declaration: true,
            experimentalDecorators: true,
            importHelpers: true,
            noUnusedLocals: true,
            preserveConstEnums: true,
            types: ['jest', 'custom-global', 'inline-style-expand-shorthand'],
        },
    },
    jest: (options) => devkit_1.stripIndents `
      // @ts-check

      /**
      * @type {jest.InitialOptions}
      */
      module.exports = {
        displayName: '${options.pkgName}',
        preset: '../../jest.preset.js',
        globals: {
          'ts-jest': {
            tsConfig: '<rootDir>/tsconfig.json',
            diagnostics: false,
          },
        },
        transform: {
          '^.+\\.tsx?$': 'ts-jest',
        },
        coverageDirectory: './coverage',
        setupFilesAfterEnv: ['./config/tests.js'],
        snapshotSerializers: ['@fluentui/jest-serializer-make-styles'],
      };
  `,
    storybook: {
        /* eslint-disable @fluentui/max-len */
        main: devkit_1.stripIndents `
      const rootMain = require('../../../.storybook/main');

      module.exports = /** @type {Pick<import('../../../.storybook/main').StorybookConfig,'addons'|'stories'|'webpackFinal'>} */ ({
        stories: [...rootMain.stories, '../src/**/*.stories.mdx', '../src/**/*.stories.@(ts|tsx)'],
        addons: [...rootMain.addons],
        webpackFinal: (config, options) => {
          const localConfig = { ...rootMain.webpackFinal(config, options) };

          return localConfig;
        },
      });
    `,
        /* eslint-enable @fluentui/max-len */
        preview: devkit_1.stripIndents `
      import * as rootPreview from '../../../.storybook/preview';

      export const decorators = [...rootPreview.decorators];
    `,
        tsconfig: {
            extends: '../tsconfig.json',
            compilerOptions: {
                allowJs: true,
                checkJs: true,
            },
            exclude: ['../**/*.test.ts', '../**/*.test.js', '../**/*.test.tsx', '../**/*.test.jsx'],
            include: ['../src/**/*', '*.js'],
        },
    },
};
function normalizeOptions(host, options) {
    const defaults = {};
    const workspaceConfig = devkit_1.readWorkspaceConfiguration(host);
    const projectConfig = devkit_1.readProjectConfiguration(host, options.name);
    return Object.assign(Object.assign(Object.assign({}, defaults), options), { projectConfig, workspaceConfig: workspaceConfig, 
        /**
         * package name without npmScope (@scopeName)
         */
        normalizedPkgName: options.name.replace(`@${workspaceConfig.npmScope}/`, ''), paths: {
            configRoot: devkit_1.joinPathFragments(projectConfig.root, 'config'),
            packageJson: devkit_1.joinPathFragments(projectConfig.root, 'package.json'),
            tsconfig: devkit_1.joinPathFragments(projectConfig.root, 'tsconfig.json'),
            jestConfig: devkit_1.joinPathFragments(projectConfig.root, 'jest.config.js'),
            rootTsconfig: '/tsconfig.base.json',
            rootJestPreset: '/jest.preset.js',
            rootJestConfig: '/jest.config.js',
            storybook: {
                tsconfig: devkit_1.joinPathFragments(projectConfig.root, '.storybook/tsconfig.json'),
                main: devkit_1.joinPathFragments(projectConfig.root, '.storybook/main.js'),
                preview: devkit_1.joinPathFragments(projectConfig.root, '.storybook/preview.js'),
            },
        } });
}
function validateUserInput(tree, options) {
    if (!options.name) {
        throw new Error(`--name cannot be empty. Please provide name of the package.`);
    }
    const projectConfig = devkit_1.readProjectConfiguration(tree, options.name);
    if (!isPackageConverged(tree, projectConfig)) {
        throw new Error(`${options.name} is not converged package. Make sure to run the migration on packages with version 9.x.x`);
    }
}
function printStats(tree, options) {
    const allProjects = devkit_1.getProjects(tree);
    const stats = {
        migrated: [],
        notMigrated: [],
    };
    allProjects.forEach((project, projectName) => {
        if (!isPackageConverged(tree, project)) {
            return;
        }
        if (isProjectMigrated(project)) {
            stats.migrated.push(Object.assign({ projectName }, project));
            return;
        }
        stats.notMigrated.push(Object.assign({ projectName }, project));
    });
    devkit_1.logger.info('Convergence DX migration stats:');
    devkit_1.logger.info('='.repeat(80));
    devkit_1.logger.info(`Migrated (${stats.migrated.length}):`);
    devkit_1.logger.info(stats.migrated.map(projectStat => `- ${projectStat.projectName}`).join('\n'));
    devkit_1.logger.info('='.repeat(80));
    devkit_1.logger.info(`Not migrated (${stats.notMigrated.length}):`);
    devkit_1.logger.info(stats.notMigrated.map(projectStat => `- ${projectStat.projectName}`).join('\n'));
    return tree;
}
function isPackageConverged(tree, project) {
    const packageJson = devkit_1.readJson(tree, devkit_1.joinPathFragments(project.root, 'package.json'));
    return packageJson.version.startsWith('9.');
}
function isProjectMigrated(project) {
    var _a;
    // eslint-disable-next-line eqeqeq
    return project.sourceRoot != null && Boolean((_a = project.tags) === null || _a === void 0 ? void 0 : _a.includes('vNext'));
}
function uniqueArray(value) {
    return Array.from(new Set(value));
}
function updateNxWorkspace(tree, options) {
    var _a;
    devkit_1.updateProjectConfiguration(tree, options.name, Object.assign(Object.assign({}, options.projectConfig), { sourceRoot: devkit_1.joinPathFragments(options.projectConfig.root, 'src'), tags: uniqueArray([...((_a = options.projectConfig.tags) !== null && _a !== void 0 ? _a : []), 'vNext', 'platform:web']) }));
    return tree;
}
function updateNpmScripts(tree, options) {
    devkit_1.updateJson(tree, options.paths.packageJson, json => {
        delete json.scripts['update-snapshots'];
        delete json.scripts['start-test'];
        json.scripts.docs = 'api-extractor run --config=config/api-extractor.local.json --local';
        json.scripts['build:local'
        // eslint-disable-next-line @fluentui/max-len
        ] = `tsc -p . --module esnext --emitDeclarationOnly && node ../../scripts/typescript/normalize-import --output dist/${options.normalizedPkgName}/src && yarn docs`;
        json.scripts.storybook = 'start-storybook';
        json.scripts.start = 'storybook';
        json.scripts.test = 'jest';
        return json;
    });
    return tree;
}
function updateApiExtractorForLocalBuilds(tree, options) {
    devkit_1.writeJson(tree, devkit_1.joinPathFragments(options.paths.configRoot, 'api-extractor.local.json'), templates.apiExtractorLocal);
    devkit_1.writeJson(tree, devkit_1.joinPathFragments(options.paths.configRoot, 'api-extractor.json'), templates.apiExtractor);
    return tree;
}
function setupStorybook(tree, options) {
    tree.write(options.paths.storybook.tsconfig, workspace_1.serializeJson(templates.storybook.tsconfig));
    tree.write(options.paths.storybook.main, templates.storybook.main);
    tree.write(options.paths.storybook.preview, templates.storybook.preview);
    return tree;
}
function moveStorybookFromReactExamples(tree, options, userLog) {
    const reactExamplesConfig = getReactExamplesProjectConfig(tree, options);
    const pathToStoriesWithinReactExamples = `${reactExamplesConfig.root}/src/${options.normalizedPkgName}`;
    const storyPaths = [];
    devkit_1.visitNotIgnoredFiles(tree, pathToStoriesWithinReactExamples, treePath => {
        if (treePath.includes('.stories.')) {
            storyPaths.push(treePath);
        }
    });
    if (storyPaths.length === 0) {
        userLog.push({
            type: 'warn',
            message: 'No package stories found within react-examples. Skipping storybook stories migration...',
        });
        return tree;
    }
    storyPaths.forEach(originPath => {
        var _a;
        const pathSegments = splitPathFragments(originPath);
        const fileName = pathSegments[pathSegments.length - 1];
        const componentName = fileName.replace(/\.stories\.tsx?$/, '');
        let contents = (_a = tree.read(originPath)) === null || _a === void 0 ? void 0 : _a.toString('utf-8');
        if (contents) {
            contents = contents.replace(options.name, './index');
            contents =
                contents +
                    '\n\n' +
                    devkit_1.stripIndents `
        export default {
            title: 'Components/${componentName}',
            component: ${componentName},
        }
      `;
            tree.write(devkit_1.joinPathFragments(options.projectConfig.root, 'src', fileName), contents);
            return;
        }
        throw new Error(`Error moving ${fileName} from react-examples`);
    });
    return tree;
}
function getReactExamplesProjectConfig(tree, options) {
    return devkit_1.readProjectConfiguration(tree, `@${options.workspaceConfig.npmScope}/react-examples`);
}
function removeMigratedPackageFromReactExamples(tree, options, userLog) {
    const reactExamplesConfig = getReactExamplesProjectConfig(tree, options);
    const paths = {
        packageStoriesWithinReactExamples: `${reactExamplesConfig.root}/src/${options.normalizedPkgName}`,
        packageJson: `${reactExamplesConfig.root}/package.json`,
    };
    if (!tree.exists(paths.packageStoriesWithinReactExamples)) {
        return tree;
    }
    tree.delete(paths.packageStoriesWithinReactExamples);
    userLog.push({ type: 'warn', message: `NOTE: Deleting ${reactExamplesConfig.root}/src/${options.normalizedPkgName}` }, { type: 'warn', message: `      - Please update your moved stories to follow standard storybook format\n` });
    devkit_1.updateJson(tree, paths.packageJson, (json) => {
        if (json.dependencies) {
            delete json.dependencies[options.name];
        }
        return json;
    });
    return tree;
}
function updateLocalJestConfig(tree, options) {
    tree.write(options.paths.jestConfig, templates.jest({ pkgName: options.normalizedPkgName }));
    return tree;
}
function updateRootJestConfig(tree, options) {
    update_jestconfig_1.updateJestConfig(tree, { project: options.name });
    return tree;
}
function updatedLocalTsConfig(tree, options) {
    var _a, _b;
    const newConfig = Object.assign({}, templates.tsconfig);
    const oldConfig = devkit_1.readJson(tree, options.paths.tsconfig);
    const oldConfigTypes = (_a = oldConfig.compilerOptions.types) !== null && _a !== void 0 ? _a : [];
    const newConfigTypes = (_b = newConfig.compilerOptions.types) !== null && _b !== void 0 ? _b : [];
    const updatedTypes = uniqueArray([...newConfigTypes, ...oldConfigTypes]);
    newConfig.compilerOptions.types = updatedTypes;
    tree.write(options.paths.tsconfig, workspace_1.serializeJson(newConfig));
    return tree;
}
function updatedBaseTsConfig(tree, options) {
    var _a;
    const workspaceConfig = devkit_1.readWorkspaceConfiguration(tree);
    const allProjects = devkit_1.getProjects(tree);
    const projectPkgJson = devkit_1.readJson(tree, options.paths.packageJson);
    const depsThatNeedToBecomeAliases = Object.keys((_a = projectPkgJson.dependencies) !== null && _a !== void 0 ? _a : {})
        .filter(pkgName => pkgName.startsWith(`@${workspaceConfig.npmScope}`))
        .reduce((acc, pkgName) => {
        var _a;
        acc[pkgName] = [`${(_a = allProjects.get(pkgName)) === null || _a === void 0 ? void 0 : _a.root}/src/index.ts`];
        return acc;
    }, {});
    devkit_1.updateJson(tree, options.paths.rootTsconfig, json => {
        var _a;
        json.compilerOptions.paths = (_a = json.compilerOptions.paths) !== null && _a !== void 0 ? _a : {};
        json.compilerOptions.paths[options.name] = [`${options.projectConfig.root}/src/index.ts`];
        Object.assign(json.compilerOptions.paths, depsThatNeedToBecomeAliases);
        return json;
    });
}
function printUserLogs(logs) {
    devkit_1.logger.log(`${'='.repeat(80)}\n`);
    logs.forEach(log => devkit_1.logger[log.type](log.message));
    devkit_1.logger.log(`${'='.repeat(80)}\n`);
}
function splitPathFragments(filePath) {
    return filePath.split(path.sep);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,