{"file":"C:\\Users\\czear\\Documents\\fluentui\\tools\\generators\\migrate-converged-pkg\\index.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\czear\\Documents\\fluentui\\tools\\generators\\migrate-converged-pkg\\index.spec.ts"],"sourcesContent":["import { createTreeWithEmptyWorkspace } from '@nrwl/devkit/testing';\r\nimport {\r\n  Tree,\r\n  readProjectConfiguration,\r\n  readJson,\r\n  stripIndents,\r\n  addProjectConfiguration,\r\n  readWorkspaceConfiguration,\r\n  updateJson,\r\n  logger,\r\n  updateProjectConfiguration,\r\n} from '@nrwl/devkit';\r\nimport { serializeJson, stringUtils } from '@nrwl/workspace';\r\n\r\nimport { PackageJson, TsConfig } from '../../types';\r\n\r\nimport generator from './index';\r\nimport { MigrateConvergedPkgGeneratorSchema } from './schema';\r\n\r\ninterface AssertedSchema extends MigrateConvergedPkgGeneratorSchema {\r\n  name: string;\r\n}\r\n\r\ndescribe('migrate-converged-pkg generator', () => {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  const noop = () => {};\r\n\r\n  let tree: Tree;\r\n  const options = { name: '@proj/react-dummy' };\r\n\r\n  beforeEach(() => {\r\n    jest.restoreAllMocks();\r\n\r\n    jest.spyOn(console, 'log').mockImplementation(noop);\r\n    jest.spyOn(console, 'info').mockImplementation(noop);\r\n    jest.spyOn(console, 'warn').mockImplementation(noop);\r\n\r\n    tree = createTreeWithEmptyWorkspace();\r\n    tree.write(\r\n      'jest.config.js',\r\n      stripIndents`\r\n      module.exports = {\r\n          projects: []\r\n      }`,\r\n    );\r\n    tree = setupDummyPackage(tree, options);\r\n    tree = setupDummyPackage(tree, {\r\n      name: '@proj/react-examples',\r\n      version: '8.0.0',\r\n      dependencies: {\r\n        [options.name]: '9.0.40-alpha1',\r\n        '@proj/old-v8-foo': '8.0.40',\r\n        '@proj/old-v8-bar': '8.0.41',\r\n      },\r\n    });\r\n  });\r\n\r\n  describe('general', () => {\r\n    it(`should throw error if name is empty`, async () => {\r\n      await expect(generator(tree, { name: '' })).rejects.toMatchInlineSnapshot(\r\n        `[Error: --name cannot be empty. Please provide name of the package.]`,\r\n      );\r\n    });\r\n\r\n    it(`should throw error if provided name doesn't match existing package`, async () => {\r\n      await expect(generator(tree, { name: '@proj/non-existent-lib' })).rejects.toMatchInlineSnapshot(\r\n        `[Error: Cannot find configuration for '@proj/non-existent-lib' in /workspace.json.]`,\r\n      );\r\n    });\r\n\r\n    it(`should throw error if user wants migrate non converged package`, async () => {\r\n      const projectConfig = readProjectConfiguration(tree, options.name);\r\n      updateJson(tree, `${projectConfig.root}/package.json`, json => {\r\n        json.version = '8.0.0';\r\n        return json;\r\n      });\r\n\r\n      await expect(generator(tree, options)).rejects.toMatchInlineSnapshot(\r\n        // eslint-disable-next-line @fluentui/max-len\r\n        `[Error: @proj/react-dummy is not converged package. Make sure to run the migration on packages with version 9.x.x]`,\r\n      );\r\n    });\r\n  });\r\n\r\n  describe(`tsconfig updates`, () => {\r\n    function getTsConfig(project: ReturnType<typeof readProjectConfiguration>) {\r\n      return readJson(tree, `${project.root}/tsconfig.json`);\r\n    }\r\n    function getBaseTsConfig() {\r\n      return readJson<TsConfig>(tree, `/tsconfig.base.json`);\r\n    }\r\n\r\n    it('should update package local tsconfig.json', async () => {\r\n      const projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      let tsConfig = getTsConfig(projectConfig);\r\n\r\n      expect(tsConfig).toEqual({\r\n        compilerOptions: {\r\n          baseUrl: '.',\r\n          typeRoots: ['../../node_modules/@types', '../../typings'],\r\n        },\r\n      });\r\n\r\n      await generator(tree, options);\r\n\r\n      tsConfig = getTsConfig(projectConfig);\r\n\r\n      expect(tsConfig).toEqual({\r\n        compilerOptions: {\r\n          declaration: true,\r\n          experimentalDecorators: true,\r\n          importHelpers: true,\r\n          jsx: 'react',\r\n          lib: ['es5', 'dom'],\r\n          module: 'CommonJS',\r\n          noUnusedLocals: true,\r\n          outDir: 'dist',\r\n          preserveConstEnums: true,\r\n          target: 'ES5',\r\n          types: ['jest', 'custom-global', 'inline-style-expand-shorthand'],\r\n        },\r\n        extends: '../../tsconfig.base.json',\r\n        include: ['src'],\r\n      });\r\n    });\r\n\r\n    it('should update compilerOptions.types definition for local tsconfig.json', async () => {\r\n      const projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      updateJson(tree, `${projectConfig.root}/tsconfig.json`, (json: TsConfig) => {\r\n        json.compilerOptions.types = ['jest', '@testing-library/jest-dom', 'foo-bar'];\r\n        return json;\r\n      });\r\n\r\n      await generator(tree, options);\r\n\r\n      const tsConfig = getTsConfig(projectConfig);\r\n\r\n      expect(tsConfig.compilerOptions.types).toEqual([\r\n        'jest',\r\n        'custom-global',\r\n        'inline-style-expand-shorthand',\r\n        '@testing-library/jest-dom',\r\n        'foo-bar',\r\n      ]);\r\n    });\r\n\r\n    // eslint-disable-next-line @fluentui/max-len\r\n    it('should update root tsconfig.base.json with migrated package alias including all missing aliases based on packages dependencies list', async () => {\r\n      setupDummyPackage(tree, { name: '@proj/react-make-styles', dependencies: {} });\r\n      setupDummyPackage(tree, { name: '@proj/react-theme', dependencies: {} });\r\n      setupDummyPackage(tree, { name: '@proj/react-utilities', dependencies: {} });\r\n\r\n      let rootTsConfig = getBaseTsConfig();\r\n\r\n      expect(rootTsConfig).toEqual({\r\n        compilerOptions: {\r\n          paths: {},\r\n        },\r\n      });\r\n\r\n      await generator(tree, options);\r\n\r\n      rootTsConfig = getBaseTsConfig();\r\n\r\n      expect(rootTsConfig.compilerOptions.paths).toEqual(\r\n        expect.objectContaining({\r\n          '@proj/react-dummy': ['packages/react-dummy/src/index.ts'],\r\n          '@proj/react-make-styles': ['packages/react-make-styles/src/index.ts'],\r\n          '@proj/react-theme': ['packages/react-theme/src/index.ts'],\r\n          '@proj/react-utilities': ['packages/react-utilities/src/index.ts'],\r\n        }),\r\n      );\r\n\r\n      expect(\r\n        Object.keys(\r\n          rootTsConfig.compilerOptions.paths as Required<Pick<TsConfig['compilerOptions'], 'paths'>>['paths'],\r\n        ),\r\n      ).not.toContain(['tslib', 'someThirdPartyDep']);\r\n    });\r\n  });\r\n\r\n  describe(`jest config updates`, () => {\r\n    it(`should setup new local jest config which extends from root `, async () => {\r\n      const projectConfig = readProjectConfiguration(tree, options.name);\r\n      function getJestConfig() {\r\n        return tree.read(`${projectConfig.root}/jest.config.js`)?.toString('utf-8');\r\n      }\r\n\r\n      let jestConfig = getJestConfig();\r\n\r\n      expect(jestConfig).toMatchInlineSnapshot(`\r\n        \"const { createConfig } = require('@fluentui/scripts/jest/jest-resources');\r\n        const path = require('path');\r\n\r\n        const config = createConfig({\r\n        setupFiles: [path.resolve(path.join(__dirname, 'config', 'tests.js'))],\r\n        snapshotSerializers: ['@fluentui/jest-serializer-make-styles'],\r\n        });\r\n\r\n        module.exports = config;\"\r\n      `);\r\n\r\n      await generator(tree, options);\r\n\r\n      jestConfig = getJestConfig();\r\n\r\n      expect(jestConfig).toMatchInlineSnapshot(`\r\n        \"// @ts-check\r\n\r\n        /**\r\n        * @type {jest.InitialOptions}\r\n        */\r\n        module.exports = {\r\n        displayName: 'react-dummy',\r\n        preset: '../../jest.preset.js',\r\n        globals: {\r\n        'ts-jest': {\r\n        tsConfig: '<rootDir>/tsconfig.json',\r\n        diagnostics: false,\r\n        },\r\n        },\r\n        transform: {\r\n        '^.+\\\\\\\\\\\\\\\\.tsx?$': 'ts-jest',\r\n        },\r\n        coverageDirectory: './coverage',\r\n        setupFilesAfterEnv: ['./config/tests.js'],\r\n        snapshotSerializers: ['@fluentui/jest-serializer-make-styles'],\r\n        };\"\r\n      `);\r\n    });\r\n\r\n    it(`should add project to root jest.config.js`, async () => {\r\n      function getJestConfig() {\r\n        return tree.read(`/jest.config.js`)?.toString('utf-8');\r\n      }\r\n      let jestConfig = getJestConfig();\r\n\r\n      expect(jestConfig).toMatchInlineSnapshot(`\r\n        \"module.exports = {\r\n        projects: []\r\n        }\"\r\n      `);\r\n\r\n      await generator(tree, options);\r\n\r\n      jestConfig = getJestConfig();\r\n\r\n      expect(jestConfig).toMatchInlineSnapshot(`\r\n        \"module.exports = {\r\n        projects: [\\\\\"<rootDir>/packages/react-dummy\\\\\"]\r\n        }\"\r\n      `);\r\n    });\r\n  });\r\n\r\n  describe(`storybook updates`, () => {\r\n    it(`should setup local storybook`, async () => {\r\n      const projectConfig = readProjectConfiguration(tree, options.name);\r\n      const projectStorybookConfigPath = `${projectConfig.root}/.storybook`;\r\n\r\n      expect(tree.exists(projectStorybookConfigPath)).toBeFalsy();\r\n\r\n      await generator(tree, options);\r\n\r\n      expect(tree.exists(projectStorybookConfigPath)).toBeTruthy();\r\n      expect(readJson(tree, `${projectStorybookConfigPath}/tsconfig.json`)).toMatchInlineSnapshot(`\r\n        Object {\r\n          \"compilerOptions\": Object {\r\n            \"allowJs\": true,\r\n            \"checkJs\": true,\r\n          },\r\n          \"exclude\": Array [\r\n            \"../**/*.test.ts\",\r\n            \"../**/*.test.js\",\r\n            \"../**/*.test.tsx\",\r\n            \"../**/*.test.jsx\",\r\n          ],\r\n          \"extends\": \"../tsconfig.json\",\r\n          \"include\": Array [\r\n            \"../src/**/*\",\r\n            \"*.js\",\r\n          ],\r\n        }\r\n      `);\r\n\r\n      /* eslint-disable @fluentui/max-len */\r\n      expect(tree.read(`${projectStorybookConfigPath}/main.js`)?.toString('utf-8')).toMatchInlineSnapshot(`\r\n        \"const rootMain = require('../../../.storybook/main');\r\n\r\n        module.exports = /** @type {Pick<import('../../../.storybook/main').StorybookConfig,'addons'|'stories'|'webpackFinal'>} */ ({\r\n        stories: [...rootMain.stories, '../src/**/*.stories.mdx', '../src/**/*.stories.@(ts|tsx)'],\r\n        addons: [...rootMain.addons],\r\n        webpackFinal: (config, options) => {\r\n        const localConfig = { ...rootMain.webpackFinal(config, options) };\r\n\r\n        return localConfig;\r\n        },\r\n        });\"\r\n      `);\r\n      /* eslint-enable @fluentui/max-len */\r\n\r\n      expect(tree.read(`${projectStorybookConfigPath}/preview.js`)?.toString('utf-8')).toMatchInlineSnapshot(`\r\n        \"import * as rootPreview from '../../../.storybook/preview';\r\n\r\n        export const decorators = [...rootPreview.decorators];\"\r\n      `);\r\n    });\r\n\r\n    function setup() {\r\n      const workspaceConfig = readWorkspaceConfiguration(tree);\r\n      const projectConfig = readProjectConfiguration(tree, options.name);\r\n      const normalizedProjectName = options.name.replace(`@${workspaceConfig.npmScope}/`, '');\r\n      const reactExamplesConfig = readProjectConfiguration(tree, '@proj/react-examples');\r\n      const pathToStoriesWithinReactExamples = `${reactExamplesConfig.root}/src/${normalizedProjectName}`;\r\n\r\n      const paths = {\r\n        reactExamples: {\r\n          // eslint-disable-next-line @fluentui/max-len\r\n          //  options.name==='@proj/react-dummy' -> react-examples/src/react-dummy/ReactDummyOther/ReactDummy.stories.tsx\r\n          storyFileOne: `${pathToStoriesWithinReactExamples}/${stringUtils.classify(\r\n            normalizedProjectName,\r\n          )}/${stringUtils.classify(normalizedProjectName)}.stories.tsx`,\r\n          // eslint-disable-next-line @fluentui/max-len\r\n          // if options.name==='@proj/react-dummy' -> react-examples/src/react-dummy/ReactDummyOther/ReactDummyOther.stories.tsx\r\n          storyFileTwo: `${pathToStoriesWithinReactExamples}/${stringUtils.classify(\r\n            normalizedProjectName,\r\n          )}Other/${stringUtils.classify(normalizedProjectName)}Other.stories.tsx`,\r\n        },\r\n      };\r\n\r\n      tree.write(\r\n        paths.reactExamples.storyFileOne,\r\n        stripIndents`\r\n         import * as Implementation from '${options.name}';\r\n         export const Foo = (props: FooProps) => { return <div>Foo</div>; }\r\n        `,\r\n      );\r\n\r\n      tree.write(\r\n        paths.reactExamples.storyFileTwo,\r\n        stripIndents`\r\n         import * as Implementation from '${options.name}';\r\n         export const FooOther = (props: FooPropsOther) => { return <div>FooOther</div>; }\r\n        `,\r\n      );\r\n\r\n      function getMovedStoriesData() {\r\n        const movedStoriesExportNames = {\r\n          storyOne: `${stringUtils.classify(normalizedProjectName)}`,\r\n          storyTwo: `${stringUtils.classify(normalizedProjectName)}Other`,\r\n        };\r\n        const movedStoriesFileNames = {\r\n          storyOne: `${movedStoriesExportNames.storyOne}.stories.tsx`,\r\n          storyTwo: `${movedStoriesExportNames.storyTwo}.stories.tsx`,\r\n        };\r\n        const movedStoriesPaths = {\r\n          storyOne: `${projectConfig.root}/src/${movedStoriesFileNames.storyOne}`,\r\n          storyTwo: `${projectConfig.root}/src/${movedStoriesFileNames.storyTwo}`,\r\n        };\r\n\r\n        const movedStoriesContent = {\r\n          storyOne: tree.read(movedStoriesPaths.storyOne)?.toString('utf-8'),\r\n          storyTwo: tree.read(movedStoriesPaths.storyTwo)?.toString('utf-8'),\r\n        };\r\n\r\n        return { movedStoriesPaths, movedStoriesExportNames, movedStoriesFileNames, movedStoriesContent };\r\n      }\r\n\r\n      return {\r\n        projectConfig,\r\n        reactExamplesConfig,\r\n        workspaceConfig,\r\n        normalizedProjectName,\r\n        pathToStoriesWithinReactExamples,\r\n        getMovedStoriesData,\r\n      };\r\n    }\r\n\r\n    it(`should work if there are no package stories in react-examples`, async () => {\r\n      const reactExamplesConfig = readProjectConfiguration(tree, '@proj/react-examples');\r\n      const workspaceConfig = readWorkspaceConfiguration(tree);\r\n\r\n      expect(\r\n        tree.exists(`${reactExamplesConfig.root}/src/${options.name.replace(`@${workspaceConfig.npmScope}/`, '')}`),\r\n      ).toBe(false);\r\n\r\n      const loggerWarnSpy = jest.spyOn(logger, 'warn');\r\n      let sideEffectsCallback: () => void;\r\n\r\n      try {\r\n        sideEffectsCallback = await generator(tree, options);\r\n        sideEffectsCallback();\r\n      } catch (err) {\r\n        expect(err).toEqual(undefined);\r\n      }\r\n\r\n      expect(loggerWarnSpy).toHaveBeenCalledTimes(1);\r\n      expect(loggerWarnSpy).toHaveBeenCalledWith(\r\n        'No package stories found within react-examples. Skipping storybook stories migration...',\r\n      );\r\n    });\r\n\r\n    it(`should move stories from react-examples package to local package within sourceRoot`, async () => {\r\n      const { pathToStoriesWithinReactExamples, getMovedStoriesData } = setup();\r\n\r\n      const loggerWarnSpy = jest.spyOn(logger, 'warn');\r\n\r\n      expect(tree.exists(pathToStoriesWithinReactExamples)).toBeTruthy();\r\n\r\n      const sideEffectsCallback = await generator(tree, options);\r\n\r\n      const { movedStoriesPaths } = getMovedStoriesData();\r\n\r\n      expect(tree.exists(movedStoriesPaths.storyOne)).toBe(true);\r\n      expect(tree.exists(movedStoriesPaths.storyTwo)).toBe(true);\r\n\r\n      sideEffectsCallback();\r\n\r\n      expect(loggerWarnSpy).toHaveBeenCalledTimes(2);\r\n      expect(loggerWarnSpy.mock.calls[0][0]).toEqual('NOTE: Deleting packages/react-examples/src/react-dummy');\r\n      expect(loggerWarnSpy.mock.calls[1][0]).toEqual(\r\n        expect.stringContaining('- Please update your moved stories to follow standard storybook format'),\r\n      );\r\n    });\r\n\r\n    it(`should delete migrated package folder in react-examples`, async () => {\r\n      const { pathToStoriesWithinReactExamples, reactExamplesConfig } = setup();\r\n\r\n      expect(tree.exists(pathToStoriesWithinReactExamples)).toBeTruthy();\r\n\r\n      await generator(tree, options);\r\n\r\n      expect(tree.exists(`${reactExamplesConfig.root}/src/${options.name}`)).toBe(false);\r\n    });\r\n\r\n    it(`should replace absolute import path with relative one from index.ts`, async () => {\r\n      const { pathToStoriesWithinReactExamples, getMovedStoriesData } = setup();\r\n\r\n      expect(tree.exists(pathToStoriesWithinReactExamples)).toBeTruthy();\r\n\r\n      await generator(tree, options);\r\n\r\n      const { movedStoriesContent } = getMovedStoriesData();\r\n\r\n      expect(movedStoriesContent.storyOne).not.toContain(options.name);\r\n      expect(movedStoriesContent.storyTwo).not.toContain(options.name);\r\n\r\n      expect(movedStoriesContent.storyOne).toContain('./index');\r\n      expect(movedStoriesContent.storyTwo).toContain('./index');\r\n    });\r\n\r\n    it(`should append storybook CSF default export`, async () => {\r\n      const { pathToStoriesWithinReactExamples, getMovedStoriesData } = setup();\r\n\r\n      expect(tree.exists(pathToStoriesWithinReactExamples)).toBeTruthy();\r\n\r\n      await generator(tree, options);\r\n\r\n      const { movedStoriesExportNames, movedStoriesContent } = getMovedStoriesData();\r\n\r\n      expect(movedStoriesContent.storyOne).toContain(\r\n        stripIndents`\r\n        export default {\r\n          title: 'Components/${movedStoriesExportNames.storyOne}',\r\n          component: ${movedStoriesExportNames.storyOne},\r\n        }\r\n        `,\r\n      );\r\n      expect(movedStoriesContent.storyTwo).toContain(\r\n        stripIndents`\r\n        export default {\r\n          title: 'Components/${movedStoriesExportNames.storyTwo}',\r\n          component: ${movedStoriesExportNames.storyTwo},\r\n        }\r\n      `,\r\n      );\r\n    });\r\n\r\n    it(`should remove package-dependency from react-examples package.json`, async () => {\r\n      const { reactExamplesConfig } = setup();\r\n\r\n      let reactExamplesPkgJson = readJson<PackageJson>(tree, `${reactExamplesConfig.root}/package.json`);\r\n\r\n      expect(reactExamplesPkgJson.dependencies).toEqual(\r\n        expect.objectContaining({\r\n          [options.name]: expect.any(String),\r\n        }),\r\n      );\r\n\r\n      await generator(tree, options);\r\n\r\n      reactExamplesPkgJson = readJson<PackageJson>(tree, `${reactExamplesConfig.root}/package.json`);\r\n\r\n      expect(reactExamplesPkgJson.dependencies).not.toEqual(\r\n        expect.objectContaining({\r\n          [options.name]: expect.any(String),\r\n        }),\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('package.json updates', () => {\r\n    it(`should update package npm scripts`, async () => {\r\n      const projectConfig = readProjectConfiguration(tree, options.name);\r\n      let pkgJson = readJson(tree, `${projectConfig.root}/package.json`);\r\n\r\n      expect(pkgJson.scripts).toMatchInlineSnapshot(`\r\n        Object {\r\n          \"build\": \"just-scripts build\",\r\n          \"clean\": \"just-scripts clean\",\r\n          \"code-style\": \"just-scripts code-style\",\r\n          \"just\": \"just-scripts\",\r\n          \"lint\": \"just-scripts lint\",\r\n          \"start\": \"just-scripts dev:storybook\",\r\n          \"start-test\": \"just-scripts jest-watch\",\r\n          \"test\": \"just-scripts test\",\r\n          \"update-snapshots\": \"just-scripts jest -u\",\r\n        }\r\n      `);\r\n\r\n      await generator(tree, options);\r\n\r\n      pkgJson = readJson(tree, `${projectConfig.root}/package.json`);\r\n\r\n      expect(pkgJson.scripts).toEqual({\r\n        docs: 'api-extractor run --config=config/api-extractor.local.json --local',\r\n        // eslint-disable-next-line @fluentui/max-len\r\n        'build:local': `tsc -p . --module esnext --emitDeclarationOnly && node ../../scripts/typescript/normalize-import --output dist/react-dummy/src && yarn docs`,\r\n        build: 'just-scripts build',\r\n        clean: 'just-scripts clean',\r\n        'code-style': 'just-scripts code-style',\r\n        just: 'just-scripts',\r\n        lint: 'just-scripts lint',\r\n        start: 'storybook',\r\n        storybook: 'start-storybook',\r\n        test: 'jest',\r\n      });\r\n    });\r\n\r\n    it(`should create api-extractor.json`, async () => {\r\n      const projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      expect(tree.exists(`${projectConfig.root}/config/api-extractor.json`)).toBeFalsy();\r\n\r\n      await generator(tree, options);\r\n\r\n      expect(tree.exists(`${projectConfig.root}/config/api-extractor.json`)).toBeTruthy();\r\n    });\r\n\r\n    it(`should create api-extractor.local.json for scripts:docs task consumption`, async () => {\r\n      const projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      expect(tree.exists(`${projectConfig.root}/config/api-extractor.local.json`)).toBeFalsy();\r\n\r\n      await generator(tree, options);\r\n\r\n      expect(tree.exists(`${projectConfig.root}/config/api-extractor.local.json`)).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  describe(`nx workspace updates`, () => {\r\n    it(`should set project 'sourceRoot' in workspace.json`, async () => {\r\n      let projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      expect(projectConfig.sourceRoot).toBe(undefined);\r\n\r\n      await generator(tree, options);\r\n\r\n      projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      expect(projectConfig.sourceRoot).toBe(`${projectConfig.root}/src`);\r\n    });\r\n\r\n    it(`should set project 'vNext' and 'platform:web' tag in nx.json`, async () => {\r\n      let projectConfig = readProjectConfiguration(tree, options.name);\r\n      expect(projectConfig.tags).toBe(undefined);\r\n\r\n      await generator(tree, options);\r\n\r\n      projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      expect(projectConfig.tags).toEqual(['vNext', 'platform:web']);\r\n    });\r\n\r\n    it(`should update project tags in nx.json if they already exist`, async () => {\r\n      let projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      updateProjectConfiguration(tree, options.name, { ...projectConfig, tags: ['vNext'] });\r\n      projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      expect(projectConfig.tags).toEqual(['vNext']);\r\n\r\n      await generator(tree, options);\r\n\r\n      projectConfig = readProjectConfiguration(tree, options.name);\r\n\r\n      expect(projectConfig.tags).toEqual(['vNext', 'platform:web']);\r\n    });\r\n  });\r\n\r\n  describe(`--stats`, () => {\r\n    beforeEach(() => {\r\n      setupDummyPackage(tree, { name: '@proj/react-foo', version: '9.0.22' });\r\n      setupDummyPackage(tree, { name: '@proj/react-bar', version: '9.0.31' });\r\n      setupDummyPackage(tree, { name: '@proj/react-old', version: '8.1.12' });\r\n      setupDummyPackage(tree, { name: '@proj/react-older', version: '8.9.12' });\r\n    });\r\n\r\n    it(`should print project names and count of how many have been migrated`, async () => {\r\n      const loggerInfoSpy = jest.spyOn(logger, 'info');\r\n\r\n      await generator(tree, { stats: true });\r\n\r\n      expect(loggerInfoSpy.mock.calls[2][0]).toEqual('Migrated (0):');\r\n      expect(loggerInfoSpy.mock.calls[3][0]).toEqual('');\r\n      expect(loggerInfoSpy.mock.calls[5][0]).toEqual(`Not migrated (3):`);\r\n      expect(loggerInfoSpy.mock.calls[6][0]).toEqual(\r\n        expect.stringContaining(stripIndents`\r\n      - @proj/react-dummy\r\n      - @proj/react-foo\r\n      - @proj/react-bar\r\n      `),\r\n      );\r\n\r\n      loggerInfoSpy.mockClear();\r\n\r\n      await generator(tree, options);\r\n      await generator(tree, { stats: true });\r\n\r\n      expect(loggerInfoSpy.mock.calls[2][0]).toEqual('Migrated (1):');\r\n      expect(loggerInfoSpy.mock.calls[5][0]).toEqual(`Not migrated (2):`);\r\n    });\r\n  });\r\n});\r\n\r\n// ==== helpers ====\r\n\r\nfunction setupDummyPackage(\r\n  tree: Tree,\r\n  options: AssertedSchema &\r\n    Partial<{ version: string; dependencies: Record<string, string>; compilerOptions: TsConfig['compilerOptions'] }>,\r\n) {\r\n  const workspaceConfig = readWorkspaceConfiguration(tree);\r\n  const defaults = {\r\n    version: '9.0.0-alpha.40',\r\n    dependencies: {\r\n      [`@${workspaceConfig.npmScope}/react-make-styles`]: '^9.0.0-alpha.38',\r\n      [`@${workspaceConfig.npmScope}/react-theme`]: '^9.0.0-alpha.13',\r\n      [`@${workspaceConfig.npmScope}/react-utilities`]: '^9.0.0-alpha.25',\r\n      tslib: '^2.1.0',\r\n      someThirdPartyDep: '^11.1.2',\r\n    },\r\n    compilerOptions: { baseUrl: '.', typeRoots: ['../../node_modules/@types', '../../typings'] },\r\n  };\r\n\r\n  const normalizedOptions = { ...defaults, ...options };\r\n  const pkgName = normalizedOptions.name;\r\n  const normalizedPkgName = pkgName.replace(`@${workspaceConfig.npmScope}/`, '');\r\n  const paths = {\r\n    root: `packages/${normalizedPkgName}`,\r\n  };\r\n\r\n  const templates = {\r\n    packageJson: {\r\n      name: pkgName,\r\n      version: normalizedOptions.version,\r\n      scripts: {\r\n        build: 'just-scripts build',\r\n        clean: 'just-scripts clean',\r\n        'code-style': 'just-scripts code-style',\r\n        just: 'just-scripts',\r\n        lint: 'just-scripts lint',\r\n        start: 'just-scripts dev:storybook',\r\n        'start-test': 'just-scripts jest-watch',\r\n        test: 'just-scripts test',\r\n        'update-snapshots': 'just-scripts jest -u',\r\n      },\r\n      dependencies: normalizedOptions.dependencies,\r\n    },\r\n    tsConfig: {\r\n      compilerOptions: normalizedOptions.compilerOptions,\r\n    },\r\n    jestConfig: stripIndents`\r\n      const { createConfig } = require('@fluentui/scripts/jest/jest-resources');\r\n      const path = require('path');\r\n\r\n      const config = createConfig({\r\n        setupFiles: [path.resolve(path.join(__dirname, 'config', 'tests.js'))],\r\n        snapshotSerializers: ['@fluentui/jest-serializer-make-styles'],\r\n      });\r\n\r\n      module.exports = config;\r\n    `,\r\n  };\r\n\r\n  tree.write(`${paths.root}/package.json`, serializeJson(templates.packageJson));\r\n  tree.write(`${paths.root}/tsconfig.json`, serializeJson(templates.tsConfig));\r\n  tree.write(`${paths.root}/jest.config.js`, templates.jestConfig);\r\n\r\n  addProjectConfiguration(tree, pkgName, {\r\n    root: paths.root,\r\n    projectType: 'library',\r\n    targets: {},\r\n  });\r\n\r\n  return tree;\r\n}\r\n"],"version":3}