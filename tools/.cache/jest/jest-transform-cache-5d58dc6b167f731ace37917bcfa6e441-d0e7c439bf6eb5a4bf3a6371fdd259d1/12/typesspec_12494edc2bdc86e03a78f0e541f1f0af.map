{"file":"C:\\Users\\czear\\Documents\\fluentui\\tools\\types.spec.ts","mappings":";;AAEA,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACrB,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;YAC1B,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;gBAM7D,mCAAmC;gBACnC,MAAM,SAAS,GAAS,QAAQ,CAAC;gBACjC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;YAC3C,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;gBAM7D,mCAAmC;gBACnC,MAAM,SAAS,GAAS,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;gBAC3D,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\czear\\Documents\\fluentui\\tools\\types.spec.ts"],"sourcesContent":["import { KnownKeys, RemoveRecordIndexSignature } from './types';\n\ndescribe(`types`, () => {\n  describe(`utils`, () => {\n    describe(`#KnownKeys`, () => {\n      it(`should get keys from record except index signatures`, () => {\n        type RecordWithIndexType = { one: number; two: string; [k: string]: unknown };\n\n        // $ExpectType 'one' | 'two'\n        type Test = KnownKeys<RecordWithIndexType>;\n\n        // @ts-expect-error - testing types\n        const assertion: Test = 'random';\n        expect(assertion).toBeDefined();\n      });\n    });\n\n    describe(`#RemoveRecordIndexSignature`, () => {\n      it(`it should get record shape without index signatures`, () => {\n        type RecordWithIndexType = { one: number; two: string; [k: string]: unknown };\n\n        // $ExpectType { one: number; two: string; }\n        type Test = RemoveRecordIndexSignature<RecordWithIndexType>;\n\n        // @ts-expect-error - testing types\n        const assertion: Test = { one: 1, two: '2', fooBar: true };\n        expect(assertion).toBeDefined();\n      });\n    });\n  });\n});\n"],"version":3}